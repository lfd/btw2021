From 47a88aca751045d91e9c229a2b8f1737c41dc0d0 Mon Sep 17 00:00:00 2001
From: Wolfgang Mauerer <wolfgang.mauerer@oth-regensburg.de>
Date: Sun, 27 Sep 2020 23:42:11 +0200
Subject: [PATCH 05/12] Solve issues with multiply-defined linker symbols

Ensure that global symbols of the hashing library are
marked static to prevent that colliding instances show up in
separate compilation units, thus preventing these files
from being linked together. Also include header guards.

Signed-off-by: Wolfgang Mauerer <wolfgang.mauerer@oth-regensburg.de>
Reviewed-by: Stefanie Scherzinger <stefanie.scherzinger@uni-passau.de>
---
 ddbtoaster/srccpp/lib/hash.hpp | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/ddbtoaster/srccpp/lib/hash.hpp b/ddbtoaster/srccpp/lib/hash.hpp
index 59b402c..4a3a11c 100644
--- a/ddbtoaster/srccpp/lib/hash.hpp
+++ b/ddbtoaster/srccpp/lib/hash.hpp
@@ -1,3 +1,6 @@
+#ifndef HASH_HPP
+#define HASH_HPP
+
 #include "hpds/macro.hpp"
 #include "hpds/KDouble.hpp"
 
@@ -8,15 +11,15 @@ namespace dbtoaster {
       seed ^= hash_value(v) + 0x9e3779b9 + (seed<<6) + (seed>>2);
   }
 
-  std::hash<double> double_hasher;
-  std::hash<std::string> string_hasher;
+  static std::hash<double> double_hasher;
+  static std::hash<std::string> string_hasher;
 
   union Cast
   {
     double d;
     long l;
   };
-  volatile Cast c;
+  static volatile Cast c;
   inline int float2int( double d )
   {
     c.d = d + 6755399441055744.0;
@@ -28,7 +31,7 @@ namespace dbtoaster {
     long double d;
     long l;
   };
-  volatile Cast cLLD;
+  static volatile Cast cLLD;
   inline int longDouble2int( long double d )
   {
     cLLD.d = d + 6755399441055744.0;
@@ -99,4 +102,6 @@ namespace dbtoaster {
       seed ^= v + 0x9e3779b9 + (seed<<6) + (seed>>2);
   }
 
-}
\ No newline at end of file
+}
+
+#endif
-- 
2.10.2

